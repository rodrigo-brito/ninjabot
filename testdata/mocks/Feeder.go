// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rodrigo-brito/ninjabot/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Feeder is an autogenerated mock type for the Feeder type
type Feeder struct {
	mock.Mock
}

type Feeder_Expecter struct {
	mock *mock.Mock
}

func (_m *Feeder) EXPECT() *Feeder_Expecter {
	return &Feeder_Expecter{mock: &_m.Mock}
}

// AssetsInfo provides a mock function with given fields: pair
func (_m *Feeder) AssetsInfo(pair string) model.AssetInfo {
	ret := _m.Called(pair)

	var r0 model.AssetInfo
	if rf, ok := ret.Get(0).(func(string) model.AssetInfo); ok {
		r0 = rf(pair)
	} else {
		r0 = ret.Get(0).(model.AssetInfo)
	}

	return r0
}

// Feeder_AssetsInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssetsInfo'
type Feeder_AssetsInfo_Call struct {
	*mock.Call
}

// AssetsInfo is a helper method to define mock.On call
//   - pair string
func (_e *Feeder_Expecter) AssetsInfo(pair interface{}) *Feeder_AssetsInfo_Call {
	return &Feeder_AssetsInfo_Call{Call: _e.mock.On("AssetsInfo", pair)}
}

func (_c *Feeder_AssetsInfo_Call) Run(run func(pair string)) *Feeder_AssetsInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Feeder_AssetsInfo_Call) Return(_a0 model.AssetInfo) *Feeder_AssetsInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

// CandlesByLimit provides a mock function with given fields: ctx, pair, period, limit
func (_m *Feeder) CandlesByLimit(ctx context.Context, pair string, period string, limit int) ([]model.Candle, error) {
	ret := _m.Called(ctx, pair, period, limit)

	var r0 []model.Candle
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) []model.Candle); ok {
		r0 = rf(ctx, pair, period, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Candle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, pair, period, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Feeder_CandlesByLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CandlesByLimit'
type Feeder_CandlesByLimit_Call struct {
	*mock.Call
}

// CandlesByLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - pair string
//   - period string
//   - limit int
func (_e *Feeder_Expecter) CandlesByLimit(ctx interface{}, pair interface{}, period interface{}, limit interface{}) *Feeder_CandlesByLimit_Call {
	return &Feeder_CandlesByLimit_Call{Call: _e.mock.On("CandlesByLimit", ctx, pair, period, limit)}
}

func (_c *Feeder_CandlesByLimit_Call) Run(run func(ctx context.Context, pair string, period string, limit int)) *Feeder_CandlesByLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *Feeder_CandlesByLimit_Call) Return(_a0 []model.Candle, _a1 error) *Feeder_CandlesByLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CandlesByPeriod provides a mock function with given fields: ctx, pair, period, start, end
func (_m *Feeder) CandlesByPeriod(ctx context.Context, pair string, period string, start time.Time, end time.Time) ([]model.Candle, error) {
	ret := _m.Called(ctx, pair, period, start, end)

	var r0 []model.Candle
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Time) []model.Candle); ok {
		r0 = rf(ctx, pair, period, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Candle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, pair, period, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Feeder_CandlesByPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CandlesByPeriod'
type Feeder_CandlesByPeriod_Call struct {
	*mock.Call
}

// CandlesByPeriod is a helper method to define mock.On call
//   - ctx context.Context
//   - pair string
//   - period string
//   - start time.Time
//   - end time.Time
func (_e *Feeder_Expecter) CandlesByPeriod(ctx interface{}, pair interface{}, period interface{}, start interface{}, end interface{}) *Feeder_CandlesByPeriod_Call {
	return &Feeder_CandlesByPeriod_Call{Call: _e.mock.On("CandlesByPeriod", ctx, pair, period, start, end)}
}

func (_c *Feeder_CandlesByPeriod_Call) Run(run func(ctx context.Context, pair string, period string, start time.Time, end time.Time)) *Feeder_CandlesByPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time), args[4].(time.Time))
	})
	return _c
}

func (_c *Feeder_CandlesByPeriod_Call) Return(_a0 []model.Candle, _a1 error) *Feeder_CandlesByPeriod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CandlesSubscription provides a mock function with given fields: ctx, pair, timeframe
func (_m *Feeder) CandlesSubscription(ctx context.Context, pair string, timeframe string) (chan model.Candle, chan error) {
	ret := _m.Called(ctx, pair, timeframe)

	var r0 chan model.Candle
	if rf, ok := ret.Get(0).(func(context.Context, string, string) chan model.Candle); ok {
		r0 = rf(ctx, pair, timeframe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan model.Candle)
		}
	}

	var r1 chan error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) chan error); ok {
		r1 = rf(ctx, pair, timeframe)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}

// Feeder_CandlesSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CandlesSubscription'
type Feeder_CandlesSubscription_Call struct {
	*mock.Call
}

// CandlesSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - pair string
//   - timeframe string
func (_e *Feeder_Expecter) CandlesSubscription(ctx interface{}, pair interface{}, timeframe interface{}) *Feeder_CandlesSubscription_Call {
	return &Feeder_CandlesSubscription_Call{Call: _e.mock.On("CandlesSubscription", ctx, pair, timeframe)}
}

func (_c *Feeder_CandlesSubscription_Call) Run(run func(ctx context.Context, pair string, timeframe string)) *Feeder_CandlesSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Feeder_CandlesSubscription_Call) Return(_a0 chan model.Candle, _a1 chan error) *Feeder_CandlesSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// LastQuote provides a mock function with given fields: ctx, pair
func (_m *Feeder) LastQuote(ctx context.Context, pair string) (float64, error) {
	ret := _m.Called(ctx, pair)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, pair)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Feeder_LastQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastQuote'
type Feeder_LastQuote_Call struct {
	*mock.Call
}

// LastQuote is a helper method to define mock.On call
//   - ctx context.Context
//   - pair string
func (_e *Feeder_Expecter) LastQuote(ctx interface{}, pair interface{}) *Feeder_LastQuote_Call {
	return &Feeder_LastQuote_Call{Call: _e.mock.On("LastQuote", ctx, pair)}
}

func (_c *Feeder_LastQuote_Call) Run(run func(ctx context.Context, pair string)) *Feeder_LastQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Feeder_LastQuote_Call) Return(_a0 float64, _a1 error) *Feeder_LastQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewFeeder interface {
	mock.TestingT
	Cleanup(func())
}

// NewFeeder creates a new instance of Feeder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFeeder(t mockConstructorTestingTNewFeeder) *Feeder {
	mock := &Feeder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
