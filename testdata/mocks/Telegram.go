// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	model "github.com/rodrigo-brito/ninjabot/model"
	mock "github.com/stretchr/testify/mock"
)

// Telegram is an autogenerated mock type for the Telegram type
type Telegram struct {
	mock.Mock
}

type Telegram_Expecter struct {
	mock *mock.Mock
}

func (_m *Telegram) EXPECT() *Telegram_Expecter {
	return &Telegram_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: _a0
func (_m *Telegram) Notify(_a0 string) {
	_m.Called(_a0)
}

// Telegram_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type Telegram_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - _a0 string
func (_e *Telegram_Expecter) Notify(_a0 interface{}) *Telegram_Notify_Call {
	return &Telegram_Notify_Call{Call: _e.mock.On("Notify", _a0)}
}

func (_c *Telegram_Notify_Call) Run(run func(_a0 string)) *Telegram_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Telegram_Notify_Call) Return() *Telegram_Notify_Call {
	_c.Call.Return()
	return _c
}

// OnError provides a mock function with given fields: err
func (_m *Telegram) OnError(err error) {
	_m.Called(err)
}

// Telegram_OnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnError'
type Telegram_OnError_Call struct {
	*mock.Call
}

// OnError is a helper method to define mock.On call
//   - err error
func (_e *Telegram_Expecter) OnError(err interface{}) *Telegram_OnError_Call {
	return &Telegram_OnError_Call{Call: _e.mock.On("OnError", err)}
}

func (_c *Telegram_OnError_Call) Run(run func(err error)) *Telegram_OnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Telegram_OnError_Call) Return() *Telegram_OnError_Call {
	_c.Call.Return()
	return _c
}

// OnOrder provides a mock function with given fields: order
func (_m *Telegram) OnOrder(order model.Order) {
	_m.Called(order)
}

// Telegram_OnOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOrder'
type Telegram_OnOrder_Call struct {
	*mock.Call
}

// OnOrder is a helper method to define mock.On call
//   - order model.Order
func (_e *Telegram_Expecter) OnOrder(order interface{}) *Telegram_OnOrder_Call {
	return &Telegram_OnOrder_Call{Call: _e.mock.On("OnOrder", order)}
}

func (_c *Telegram_OnOrder_Call) Run(run func(order model.Order)) *Telegram_OnOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Order))
	})
	return _c
}

func (_c *Telegram_OnOrder_Call) Return() *Telegram_OnOrder_Call {
	_c.Call.Return()
	return _c
}

// Start provides a mock function with given fields:
func (_m *Telegram) Start() {
	_m.Called()
}

// Telegram_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Telegram_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *Telegram_Expecter) Start() *Telegram_Start_Call {
	return &Telegram_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *Telegram_Start_Call) Run(run func()) *Telegram_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Telegram_Start_Call) Return() *Telegram_Start_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewTelegram interface {
	mock.TestingT
	Cleanup(func())
}

// NewTelegram creates a new instance of Telegram. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTelegram(t mockConstructorTestingTNewTelegram) *Telegram {
	mock := &Telegram{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
